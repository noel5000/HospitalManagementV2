// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace PointOfSalesV2.EntityFramework.Migrations
{
    [DbContext(typeof(MainDataContext))]
    [Migration("20230113134931_permissions_changes_2")]
    partial class permissions_changes_2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PointOfSalesV2.Entities.Appointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("BeforeTaxesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("HospitalId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("InsuranceCoverageAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("InsuranceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InsurancePlanId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PatientPaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<decimal>("TaxesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("InsurancePlanId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.AppointmentDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<long>("AppointmentId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("BeforeTaxesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("InsuranceCoverageAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("MedicalSpecialityId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PatientPaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TaxesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalSpecialityId");

                    b.HasIndex("ProductId");

                    b.ToTable("AppointmentDetails");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.BranchOffice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NRC")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BranchOffices");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CashRegister", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<long>("BranchOfficeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchOfficeId");

                    b.ToTable("CashRegisters");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CashRegisterFlowDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<long>("CashRegisterOpeningId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MovementType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PaymentTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CashRegisterOpeningId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("CashRegisterFlowDetails");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CashRegisterOpening", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<long>("BranchOfficeId")
                        .HasColumnType("bigint");

                    b.Property<long>("CashRegisterId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ClosureDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("MaxClosureDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OpeningClosureDifference")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalClosureAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalOpeningAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPaymentsAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BranchOfficeId");

                    b.HasIndex("CashRegisterId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("CashRegisterOpenings");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CashRegisterOpeningDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<long>("CashRegisterOpeningId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsClosing")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CashRegisterOpeningId");

                    b.ToTable("CashRegisterOpeningDetails");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CheckupAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileAttachementId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PatientChekupId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FileAttachementId");

                    b.HasIndex("PatientChekupId");

                    b.ToTable("CheckupAttachments");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CheckupPrescription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AdditionalData")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EmptyStomach")
                        .HasColumnType("bit");

                    b.Property<long?>("MedicalSpecialityId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("MedicinesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PatientCheckupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Results")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("WhenToTake")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalSpecialityId");

                    b.HasIndex("PatientCheckupId");

                    b.HasIndex("ProductId");

                    b.ToTable("CheckupPrescriptions");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CompanyPayments", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<byte>("DestinationType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Details")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ExchangeRateAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GivenAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OutstandingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("PaymentDestinationId")
                        .HasColumnType("bigint");

                    b.Property<long>("PaymentTypeId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PositiveBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sequence")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("CompanyPayments");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CompositeProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<long>("BaseProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BaseProductUnitId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BaseProductId");

                    b.HasIndex("BaseProductUnitId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ProductId");

                    b.ToTable("CompositeProducts");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CreditNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Applied")
                        .HasColumnType("bit");

                    b.Property<string>("AppliedInvoiceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginInvoiceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sequence")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CreditNotes");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsLocalCurrency")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RateUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UpdatedRate")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Alergies")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("BillingAmountLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BloodTransfusions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("BloodType")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CardId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CreditAmountLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<string>("FamilyIllnesses")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("InsuranceCardId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("InsuranceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InsurancePlanId")
                        .HasColumnType("bigint");

                    b.Property<long>("InvoiceDueDays")
                        .HasColumnType("bigint");

                    b.Property<string>("Medications")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("SC")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Size")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Surgeries")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("TRNControlId")
                        .HasColumnType("bigint");

                    b.Property<string>("TRNType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("ZoneId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("InsurancePlanId");

                    b.HasIndex("TRNControlId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CustomerBalance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OwedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomersBalance");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CustomerPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CheckbookNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("InvoiceCurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OutstandingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("PaymentTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("SellerRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Sequence")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceCurrencyId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("SellerId");

                    b.ToTable("CustomersPayments");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CustomerReturn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("BeforeTaxesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("BranchOfficeId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreditNoteId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreditNoteNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TaxesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BranchOfficeId");

                    b.HasIndex("CreditNoteId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("CustomersReturns");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CustomerReturnDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("BeforeTaxesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CustomerReturnId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Defective")
                        .HasColumnType("bit");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TaxesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("UnitId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerReturnId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("CustomersReturnDetails");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.ExceptionLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Section")
                        .HasColumnType("int");

                    b.Property<string>("SectionName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExceptionLogs");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Expense", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("BeforeTaxesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("BranchOfficeId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ExchangeRateAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ExpenseReference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("GivenAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OwedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("PaymentTypeId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ReturnedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Sequence")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint");

                    b.Property<string>("TRN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TaxesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BranchOfficeId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.ExpensesPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ExchangeRateAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ExpenseCurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long>("ExpenseId")
                        .HasColumnType("bigint");

                    b.Property<string>("ExpenseReference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("GivenAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OutstandingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint");

                    b.Property<string>("PaymentSequence")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("PaymentTypeId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PositiveBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Sequence")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ExpenseCurrencyId");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ExpensesPayments");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.ExpenseTax", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ExchangeRateAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ExpenseId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TRN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("TaxId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("TaxId");

                    b.ToTable("ExpenseTaxes");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.FileAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FileAttachments");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Insurance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Contact1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Contact2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Contact3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Insurances");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.InsurancePlan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("InsuranceId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceId");

                    b.ToTable("InsurancePlans");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.InsuranceServiceCoverage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("ConsultationPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CoverageAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InsuranceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InsurancePlanId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("InsurancePlanId");

                    b.HasIndex("ProductId");

                    b.ToTable("InsuranceServiceCoverages");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Inventory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<long>("BranchOfficeId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BranchOfficeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.InventoryEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("BeforeTaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("BranchOfficeId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ExchangeRateAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NoTaxes")
                        .HasColumnType("bit");

                    b.Property<decimal>("ProductCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sequence")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BranchOfficeId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("InventoryEntries");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Invoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("AppliedCreditNoteAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("AppointmentId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("BeforeTaxesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("BillingDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("BranchOfficeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CashRegisterId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Details")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InsuranceCardId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("InsuranceCoverageAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("InsuranceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InsurancePlanId")
                        .HasColumnType("bigint");

                    b.Property<bool>("InventoryModified")
                        .HasColumnType("bit");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("NRC")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("OwedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PatientPaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReceivedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReturnedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("SellerRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("TRN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("TRNControlId")
                        .HasColumnType("bigint");

                    b.Property<string>("TRNType")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<decimal>("TaxesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("BranchOfficeId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("InsurancePlanId");

                    b.HasIndex("SellerId");

                    b.HasIndex("TRNControlId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.InvoiceDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("AppointmentId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("BeforeTaxesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("BranchOfficeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comments")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CreditNoteAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Free")
                        .HasColumnType("bit");

                    b.Property<string>("InsuranceApprovalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("InsuranceCoverageAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MedicalSpecialityId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NoCoverage")
                        .HasColumnType("bit");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PatientPaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrincipalCurrencyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SellerRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<long?>("UnitId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("MedicalSpecialityId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitId");

                    b.ToTable("InvoiceDetails");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.InvoiceLead", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("AppliedCreditNoteAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BeforeTaxesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("BillingDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("BranchOfficeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CashRegisterId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("InventoryModified")
                        .HasColumnType("bit");

                    b.Property<long?>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("MenuId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OwedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReceivedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReturnedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("SellerRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("TRN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TaxesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint");

                    b.Property<byte>("WeekNumber")
                        .HasColumnType("tinyint");

                    b.Property<long>("ZoneId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BranchOfficeId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("MenuId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SellerId");

                    b.HasIndex("ZoneId");

                    b.ToTable("InvoicesLeads");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.InvoiceTax", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TRN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("TaxId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("TaxId");

                    b.ToTable("InvoicesTaxes");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Language", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code")
                        .HasName("Code");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Code = "EN",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 1L,
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"INGLES\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"ENGLISH\"}]}"
                        },
                        new
                        {
                            Code = "ES",
                            Active = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 2L,
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"ESPANOL\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"SPANISH\"}]}"
                        });
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.LanguageKey", b =>
                {
                    b.Property<string>("LanguageCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageCode", "Key");

                    b.ToTable("LanguageKeys");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.LeadDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BeforeTaxesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("BranchOfficeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comments")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CreditNoteAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Free")
                        .HasColumnType("bit");

                    b.Property<long>("InvoiceLeadId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PrincipalCurrencyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SellerRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("UnitId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceLeadId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitId");

                    b.ToTable("LeadsDetails");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LeadDetail");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.MedicalSpeciality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MedicalSpecialities");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Menu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sequence")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("WeekNumber")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.MenuDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BeforeTaxesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("BranchOfficeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comments")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("MenuId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PrincipalCurrencyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("UnitId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitId");

                    b.ToTable("MenuDetails");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.MovementType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<short>("Code")
                        .HasColumnType("smallint");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MovementTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            Code = (short)1,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"IN\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"IN\"}]}"
                        },
                        new
                        {
                            Id = 2L,
                            Active = true,
                            Code = (short)2,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"OUT\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"OUT\"}]}"
                        });
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.OpeningAmount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OpeningsAmounts");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Operation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Operations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"READ\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"READ\"}]}"
                        },
                        new
                        {
                            Id = 2L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"ADD\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"ADD\"}]}"
                        },
                        new
                        {
                            Id = 3L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"UPDATE\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"UPDATE\"}]}"
                        },
                        new
                        {
                            Id = 4L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"DELETE\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"DELETE\"}]}"
                        },
                        new
                        {
                            Id = 5L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"READALL\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"READALL\"}]}"
                        },
                        new
                        {
                            Id = 6L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"EXPORT\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"EXPORT\"}]}"
                        },
                        new
                        {
                            Id = 7L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"ALL\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"ALL\"}]}"
                        },
                        new
                        {
                            Id = 8L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"NONE\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"NONE\"}]}"
                        },
                        new
                        {
                            Id = 9L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"ACCOUNTSTATEREPORT\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"ACCOUNTSTATEREPORT\"}]}"
                        },
                        new
                        {
                            Id = 10L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"RECEIPTSREPORT\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"RECEIPTSREPORT\"}]}"
                        },
                        new
                        {
                            Id = 11L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"DEBTSTOPAYREPORT\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"DEBTSTOPAYREPORT\"}]}"
                        },
                        new
                        {
                            Id = 12L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"MENU\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"MENU\"}]}"
                        },
                        new
                        {
                            Id = 13L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"INVENTORYREPORT\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"INVENTORYREPORT\"}]}"
                        },
                        new
                        {
                            Id = 14L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"ACCOUNTRECEIVABLES\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"ACCOUNTRECEIVABLES\"}]}"
                        },
                        new
                        {
                            Id = 15L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"SALESREPORT\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"SALESREPORT\"}]}"
                        },
                        new
                        {
                            Id = 16L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"TAXREPORT\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"TAXREPORT\"}]}"
                        },
                        new
                        {
                            Id = 17L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"GENERATEDICTIONARY\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"GENERATEDICTIONARY\"}]}"
                        },
                        new
                        {
                            Id = 18L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"COMISSIONSREPORT\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"COMISSIONSREPORT\"}]}"
                        },
                        new
                        {
                            Id = 19L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"PRODUCTMOVEMENTS\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"PRODUCTMOVEMENTS\"}]}"
                        },
                        new
                        {
                            Id = 20L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"PATIENSHISTORY\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"PATIENSHISTORY\"}]}"
                        },
                        new
                        {
                            Id = 21L,
                            Active = true,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"ATTENDPATIENT\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"ATTENDPATIENT\"}]}"
                        });
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.PatientCheckup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<long?>("AppointmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("ConsultationReason")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnoses")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagesResults")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<long?>("InsuranceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InsurancePlanId")
                        .HasColumnType("bigint");

                    b.Property<string>("LaboratoriesResults")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("MedicalBackground")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhysicalExam")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PhysicalExamChest")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PhysicalExamExtremities")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PhysicalExamHeadNeck")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PhysicalExamHeart")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PhysicalExamLungs")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PhysicalExamStomach")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Plan")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Symptoms")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("InsurancePlanId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientCheckups");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("InvoiceCurrencyId")
                        .HasColumnType("bigint");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OwedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("PaymentTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReceiptNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("SellerPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Sequence")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceCurrencyId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("SellerId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.PaymentDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BillingDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OwedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PaymentId");

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.PaymentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<short>("Code")
                        .HasColumnType("smallint");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            Code = (short)1,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Efectivo\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Cash\"}]}"
                        },
                        new
                        {
                            Id = 2L,
                            Active = true,
                            Code = (short)2,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Cheque\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Check\"}]}"
                        },
                        new
                        {
                            Id = 3L,
                            Active = true,
                            Code = (short)3,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Tarjeta de Crédito\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Credit Card\"}]}"
                        },
                        new
                        {
                            Id = 4L,
                            Active = true,
                            Code = (short)4,
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Transferencia Bancaria\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Bank Transfer\"}]}"
                        });
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailsClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Existence")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsCompositeProduct")
                        .HasColumnType("bit");

                    b.Property<bool>("IsService")
                        .HasColumnType("bit");

                    b.Property<long?>("MedicalSpecialityId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price3")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SellerRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Sequence")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("MedicalSpecialityId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.ProductSupplierCost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ProductSupplierCosts");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.ProductTax", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaxId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TaxId");

                    b.ToTable("ProductTaxes");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.RoleSectionOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("OperationId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Section")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleSectionOperations");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.School", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("AssignedWarehouseId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BranchOfficeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("LeadDueDays")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ZoneId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AssignedWarehouseId");

                    b.HasIndex("BranchOfficeId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.SchoolContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Position")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolContacts");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Section", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Controllers")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            Controllers = "Appointment",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Appointment\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Appointment\"}]}"
                        },
                        new
                        {
                            Id = 2L,
                            Active = true,
                            Controllers = "BranchOffice",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"BranchOffice\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"BranchOffice\"}]}"
                        },
                        new
                        {
                            Id = 3L,
                            Active = true,
                            Controllers = "CashRegister",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"CashRegister\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"CashRegister\"}]}"
                        },
                        new
                        {
                            Id = 4L,
                            Active = true,
                            Controllers = "CashRegisterOpening",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"CashRegisterOpening\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"CashRegisterOpening\"}]}"
                        },
                        new
                        {
                            Id = 5L,
                            Active = true,
                            Controllers = "CashRegisterOpeningsAmount",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"CashRegisterOpeningsAmount\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"CashRegisterOpeningsAmount\"}]}"
                        },
                        new
                        {
                            Id = 6L,
                            Active = true,
                            Controllers = "CheckUpAttachment",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"CheckUpAttachment\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"CheckUpAttachment\"}]}"
                        },
                        new
                        {
                            Id = 7L,
                            Active = true,
                            Controllers = "CompanyPayment",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"CompanyPayment\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"CompanyPayment\"}]}"
                        },
                        new
                        {
                            Id = 8L,
                            Active = true,
                            Controllers = "CompanyState",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"CompanyState\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"CompanyState\"}]}"
                        },
                        new
                        {
                            Id = 9L,
                            Active = true,
                            Controllers = "CompositeProduct",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"CompositeProduct\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"CompositeProduct\"}]}"
                        },
                        new
                        {
                            Id = 10L,
                            Active = true,
                            Controllers = "CreditNote",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"CreditNote\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"CreditNote\"}]}"
                        },
                        new
                        {
                            Id = 11L,
                            Active = true,
                            Controllers = "Currency",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Currency\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Currency\"}]}"
                        },
                        new
                        {
                            Id = 12L,
                            Active = true,
                            Controllers = "CustomerBalance",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"CustomerBalance\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"CustomerBalance\"}]}"
                        },
                        new
                        {
                            Id = 13L,
                            Active = true,
                            Controllers = "Customer",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Customer\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Customer\"}]}"
                        },
                        new
                        {
                            Id = 14L,
                            Active = true,
                            Controllers = "CustomerPayment",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"CustomerPayment\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"CustomerPayment\"}]}"
                        },
                        new
                        {
                            Id = 15L,
                            Active = true,
                            Controllers = "CustomerReturn",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"CustomerReturn\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"CustomerReturn\"}]}"
                        },
                        new
                        {
                            Id = 16L,
                            Active = true,
                            Controllers = "CustomerReturnDetail",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"CustomerReturnDetail\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"CustomerReturnDetail\"}]}"
                        },
                        new
                        {
                            Id = 17L,
                            Active = true,
                            Controllers = "Expense",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Expense\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Expense\"}]}"
                        },
                        new
                        {
                            Id = 18L,
                            Active = true,
                            Controllers = "ExpensePayment",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"ExpensePayment\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"ExpensePayment\"}]}"
                        },
                        new
                        {
                            Id = 19L,
                            Active = true,
                            Controllers = "ExpenseTax",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"ExpenseTax\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"ExpenseTax\"}]}"
                        },
                        new
                        {
                            Id = 20L,
                            Active = true,
                            Controllers = "Insurance",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Insurance\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Insurance\"}]}"
                        },
                        new
                        {
                            Id = 21L,
                            Active = true,
                            Controllers = "InsurancePlan",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"InsurancePlan\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"InsurancePlan\"}]}"
                        },
                        new
                        {
                            Id = 22L,
                            Active = true,
                            Controllers = "InsuranceServiceCoverage",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"InsuranceServiceCoverage\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"InsuranceServiceCoverage\"}]}"
                        },
                        new
                        {
                            Id = 23L,
                            Active = true,
                            Controllers = "Inventory",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Inventory\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Inventory\"}]}"
                        },
                        new
                        {
                            Id = 24L,
                            Active = true,
                            Controllers = "InventoryEntry",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"InventoryEntry\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"InventoryEntry\"}]}"
                        },
                        new
                        {
                            Id = 25L,
                            Active = true,
                            Controllers = "Invoice",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Invoice\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Invoice\"}]}"
                        },
                        new
                        {
                            Id = 26L,
                            Active = true,
                            Controllers = "InvoiceTax",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"InvoiceTax\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"InvoiceTax\"}]}"
                        },
                        new
                        {
                            Id = 27L,
                            Active = true,
                            Controllers = "Language",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Language\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Language\"}]}"
                        },
                        new
                        {
                            Id = 28L,
                            Active = true,
                            Controllers = "Login",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Login\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Login\"}]}"
                        },
                        new
                        {
                            Id = 29L,
                            Active = true,
                            Controllers = "Logout",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Logout\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Logout\"}]}"
                        },
                        new
                        {
                            Id = 30L,
                            Active = true,
                            Controllers = "MedicalSpeciality",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"MedicalSpeciality\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"MedicalSpeciality\"}]}"
                        },
                        new
                        {
                            Id = 31L,
                            Active = true,
                            Controllers = "MovementType",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"MovementType\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"MovementType\"}]}"
                        },
                        new
                        {
                            Id = 32L,
                            Active = true,
                            Controllers = "OpeningAmount",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"OpeningAmount\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"OpeningAmount\"}]}"
                        },
                        new
                        {
                            Id = 33L,
                            Active = true,
                            Controllers = "Operation",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Operation\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Operation\"}]}"
                        },
                        new
                        {
                            Id = 34L,
                            Active = true,
                            Controllers = "PatientCheckup",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"PatientCheckup\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"PatientCheckup\"}]}"
                        },
                        new
                        {
                            Id = 35L,
                            Active = true,
                            Controllers = "Payment",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Payment\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Payment\"}]}"
                        },
                        new
                        {
                            Id = 36L,
                            Active = true,
                            Controllers = "PaymentDetail",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"PaymentDetail\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"PaymentDetail\"}]}"
                        },
                        new
                        {
                            Id = 37L,
                            Active = true,
                            Controllers = "PaymentType",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"PaymentType\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"PaymentType\"}]}"
                        },
                        new
                        {
                            Id = 38L,
                            Active = true,
                            Controllers = "ProductComposite",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"ProductComposite\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"ProductComposite\"}]}"
                        },
                        new
                        {
                            Id = 39L,
                            Active = true,
                            Controllers = "Product",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Product\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Product\"}]}"
                        },
                        new
                        {
                            Id = 40L,
                            Active = true,
                            Controllers = "ProductCost",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"ProductCost\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"ProductCost\"}]}"
                        },
                        new
                        {
                            Id = 41L,
                            Active = true,
                            Controllers = "ProductTax",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"ProductTax\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"ProductTax\"}]}"
                        },
                        new
                        {
                            Id = 42L,
                            Active = true,
                            Controllers = "ProductUnit",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"ProductUnit\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"ProductUnit\"}]}"
                        },
                        new
                        {
                            Id = 43L,
                            Active = true,
                            Controllers = "ReturnDetail",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"ReturnDetail\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"ReturnDetail\"}]}"
                        },
                        new
                        {
                            Id = 44L,
                            Active = true,
                            Controllers = "Role",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Role\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Role\"}]}"
                        },
                        new
                        {
                            Id = 45L,
                            Active = true,
                            Controllers = "RoleSectionOperation",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"RoleSectionOperation\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"RoleSectionOperation\"}]}"
                        },
                        new
                        {
                            Id = 46L,
                            Active = true,
                            Controllers = "Seller",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Seller\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Seller\"}]}"
                        },
                        new
                        {
                            Id = 47L,
                            Active = true,
                            Controllers = "SupplierBalance",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"SupplierBalance\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"SupplierBalance\"}]}"
                        },
                        new
                        {
                            Id = 48L,
                            Active = true,
                            Controllers = "Supplier",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Supplier\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Supplier\"}]}"
                        },
                        new
                        {
                            Id = 49L,
                            Active = true,
                            Controllers = "SupplierReturn",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"SupplierReturn\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"SupplierReturn\"}]}"
                        },
                        new
                        {
                            Id = 50L,
                            Active = true,
                            Controllers = "Tax",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Tax\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Tax\"}]}"
                        },
                        new
                        {
                            Id = 51L,
                            Active = true,
                            Controllers = "TrnControl",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"TrnControl\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"TrnControl\"}]}"
                        },
                        new
                        {
                            Id = 52L,
                            Active = true,
                            Controllers = "Unit",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Unit\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Unit\"}]}"
                        },
                        new
                        {
                            Id = 53L,
                            Active = true,
                            Controllers = "UnitProductEquivalence",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"UnitProductEquivalence\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"UnitProductEquivalence\"}]}"
                        },
                        new
                        {
                            Id = 54L,
                            Active = true,
                            Controllers = "User",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"User\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"User\"}]}"
                        },
                        new
                        {
                            Id = 55L,
                            Active = true,
                            Controllers = "UserRole",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"UserRole\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"UserRole\"}]}"
                        },
                        new
                        {
                            Id = 56L,
                            Active = true,
                            Controllers = "Warehouse",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Warehouse\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Warehouse\"}]}"
                        },
                        new
                        {
                            Id = 57L,
                            Active = true,
                            Controllers = "WarehouseMovement",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"WarehouseMovement\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"WarehouseMovement\"}]}"
                        },
                        new
                        {
                            Id = 58L,
                            Active = true,
                            Controllers = "WarehouseTransfer",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"WarehouseTransfer\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"WarehouseTransfer\"}]}"
                        },
                        new
                        {
                            Id = 59L,
                            Active = true,
                            Controllers = "Zone",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Zone\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Zone\"}]}"
                        },
                        new
                        {
                            Id = 60L,
                            Active = true,
                            Controllers = "All",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"All\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"All\"}]}"
                        });
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.SectionOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("OperationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SectionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("SectionId");

                    b.ToTable("SectionOperations");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Seller", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CardId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("ComissionByProduct")
                        .HasColumnType("bit");

                    b.Property<decimal>("ComissionRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FixedComission")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ZoneId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.SequenceControl", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<short>("Code")
                        .HasColumnType("smallint");

                    b.Property<string>("CodeName")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("NumericControl")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SequencesControl");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            Code = (short)1,
                            CodeName = "FAC",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Invoices",
                            NumericControl = 0L,
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Invoices\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Invoices\"}]}"
                        },
                        new
                        {
                            Id = 2L,
                            Active = true,
                            Code = (short)2,
                            CodeName = "VEND",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sellers",
                            NumericControl = 0L,
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Sellers\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Sellers\"}]}"
                        },
                        new
                        {
                            Id = 3L,
                            Active = true,
                            Code = (short)3,
                            CodeName = "CLI",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Customers",
                            NumericControl = 0L,
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Customers\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Customers\"}]}"
                        },
                        new
                        {
                            Id = 4L,
                            Active = true,
                            Code = (short)4,
                            CodeName = "COT",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Quotes",
                            NumericControl = 0L,
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Quotes\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Quotes\"}]}"
                        },
                        new
                        {
                            Id = 5L,
                            Active = true,
                            Code = (short)5,
                            CodeName = "GST",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Expenses",
                            NumericControl = 0L,
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Expenses\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Expenses\"}]}"
                        },
                        new
                        {
                            Id = 6L,
                            Active = true,
                            Code = (short)6,
                            CodeName = "TRF",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "WarehouseTransfers",
                            NumericControl = 0L,
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"WarehouseTransfers\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"WarehouseTransfers\"}]}"
                        },
                        new
                        {
                            Id = 7L,
                            Active = true,
                            Code = (short)7,
                            CodeName = "ENT",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "InventoryIncomes",
                            NumericControl = 0L,
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"InventoryIncomes\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"InventoryIncomes\"}]}"
                        },
                        new
                        {
                            Id = 8L,
                            Active = true,
                            Code = (short)8,
                            CodeName = "DEV",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CustomersReturns",
                            NumericControl = 0L,
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"CustomersReturns\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"CustomersReturns\"}]}"
                        },
                        new
                        {
                            Id = 9L,
                            Active = true,
                            Code = (short)9,
                            CodeName = "DEVS",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SupplierReturns",
                            NumericControl = 0L,
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"SupplierReturns\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"SupplierReturns\"}]}"
                        },
                        new
                        {
                            Id = 10L,
                            Active = true,
                            Code = (short)10,
                            CodeName = "R",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CustomerPayments",
                            NumericControl = 0L,
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"CustomerPayments\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"CustomerPayments\"}]}"
                        },
                        new
                        {
                            Id = 11L,
                            Active = true,
                            Code = (short)11,
                            CodeName = "P",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CompanyPayments",
                            NumericControl = 0L,
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"CompanyPayments\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"CompanyPayments\"}]}"
                        },
                        new
                        {
                            Id = 12L,
                            Active = true,
                            Code = (short)12,
                            CodeName = "CONDUCE",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Leads",
                            NumericControl = 0L,
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Leads\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Leads\"}]}"
                        },
                        new
                        {
                            Id = 13L,
                            Active = true,
                            Code = (short)13,
                            CodeName = "ESC",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Schools",
                            NumericControl = 0L,
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Schools\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Schools\"}]}"
                        },
                        new
                        {
                            Id = 14L,
                            Active = true,
                            Code = (short)14,
                            CodeName = "PG",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ExpensePayments",
                            NumericControl = 0L,
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"ExpensePayments\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"ExpensePayments\"}]}"
                        },
                        new
                        {
                            Id = 15L,
                            Active = true,
                            Code = (short)15,
                            CodeName = "PRO",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Products",
                            NumericControl = 0L,
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Products\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Products\"}]}"
                        },
                        new
                        {
                            Id = 16L,
                            Active = true,
                            Code = (short)16,
                            CodeName = "MEN",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Menus",
                            NumericControl = 0L,
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Menus\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Menus\"}]}"
                        },
                        new
                        {
                            Id = 17L,
                            Active = true,
                            Code = (short)17,
                            CodeName = "INS",
                            CreatedBy = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Insurances",
                            NumericControl = 0L,
                            TenantId = "BaseTenant",
                            TranslationData = "{\"ES\":[{\"PropertyName\":\"Name\",\"Value\":\"Insurances\"}],\"EN\":[{\"PropertyName\":\"Name\",\"Value\":\"Insurances\"}]}"
                        });
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Supplier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CardId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.SupplierBalance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OwedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SuppliersBalances");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.SupplierReturn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("BeforeTaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("BranchOfficeId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ExchangeRateAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDefective")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NoTaxes")
                        .HasColumnType("bit");

                    b.Property<decimal>("ProductCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sequence")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BranchOfficeId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("SuppliersReturns");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Tax", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.TRNControl", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("NumericControl")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigint");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("Id");

                    b.ToTable("TRNsControl");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Unit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.UnitProductEquivalence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Equivalence")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitId");

                    b.ToTable("UnitProductsEquivalences");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<long?>("BranchOfficeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CashRegisterId")
                        .HasColumnType("bigint");

                    b.Property<int>("CashRegisterOpenningTimeHours")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long?>("MedicalSpecialityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Mobile")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<double?>("Size")
                        .HasColumnType("float");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Width")
                        .HasColumnType("float");

                    b.HasKey("UserId");

                    b.HasIndex("BranchOfficeId");

                    b.HasIndex("CashRegisterId");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("MedicalSpecialityId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8a2fdd4a-e702-482c-f181-08d7015e3521"),
                            Active = true,
                            Address = "",
                            BirthDay = new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CashRegisterOpenningTimeHours = 0,
                            ContentType = "",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedByName = "admin",
                            CreatedDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@admin.com",
                            Gender = "M",
                            LanguageCode = "ES",
                            LastName = "admin",
                            Mobile = "8095555555",
                            Name = "admin",
                            Password = "yeLiBgtdL//mX+coUwD6bw==",
                            Phone = "8095555555",
                            TenantId = "BaseTenant",
                            Type = "U",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.UserClaims", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ClaimType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UsersClaims");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.UserOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Controllers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OperationId")
                        .HasColumnType("bigint");

                    b.Property<string>("OperationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationViewName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SectionId")
                        .HasColumnType("bigint");

                    b.Property<string>("SectionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperation");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Warehouse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<long>("BranchOfficeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchOfficeId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.WarehouseMovement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<long>("BranchOfficeId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MovementType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BranchOfficeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehousesMovements");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.WarehouseTransfer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("DestinyBranchOfficeId")
                        .HasColumnType("bigint");

                    b.Property<long>("DestinyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Details")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("OriginBranchOfficeId")
                        .HasColumnType("bigint");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Sequence")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DestinyBranchOfficeId");

                    b.HasIndex("DestinyId");

                    b.HasIndex("OriginBranchOfficeId");

                    b.HasIndex("OriginId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitId");

                    b.ToTable("WarehousesTransfers");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Zone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.ReturnDetail", b =>
                {
                    b.HasBaseType("PointOfSalesV2.Entities.LeadDetail");

                    b.HasDiscriminator().HasValue("ReturnDetail");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Appointment", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.BranchOffice", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Insurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId");

                    b.HasOne("PointOfSalesV2.Entities.InsurancePlan", "InsurancePlan")
                        .WithMany()
                        .HasForeignKey("InsurancePlanId");

                    b.HasOne("PointOfSalesV2.Entities.Customer", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Hospital");

                    b.Navigation("Insurance");

                    b.Navigation("InsurancePlan");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.AppointmentDetail", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Appointment", "Appointment")
                        .WithMany("Details")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.User", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("PointOfSalesV2.Entities.MedicalSpeciality", "MedicalSpeciality")
                        .WithMany()
                        .HasForeignKey("MedicalSpecialityId");

                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Currency");

                    b.Navigation("Doctor");

                    b.Navigation("MedicalSpeciality");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CashRegister", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.BranchOffice", "BranchOffice")
                        .WithMany("CashRegisters")
                        .HasForeignKey("BranchOfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BranchOffice");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CashRegisterFlowDetail", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.CashRegisterOpening", "CashRegisterOpening")
                        .WithMany("CashFlow")
                        .HasForeignKey("CashRegisterOpeningId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CashRegisterOpening");

                    b.Navigation("Currency");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CashRegisterOpening", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.BranchOffice", "BranchOffice")
                        .WithMany()
                        .HasForeignKey("BranchOfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.CashRegister", "CashRegister")
                        .WithMany()
                        .HasForeignKey("CashRegisterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.User", "User")
                        .WithMany("CashRegisterOpeningClosings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BranchOffice");

                    b.Navigation("CashRegister");

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CashRegisterOpeningDetail", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.CashRegisterOpening", "CashRegisterOpening")
                        .WithMany("Details")
                        .HasForeignKey("CashRegisterOpeningId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CashRegisterOpening");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CheckupAttachment", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.FileAttachment", "FileAttachment")
                        .WithMany()
                        .HasForeignKey("FileAttachementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.PatientCheckup", "PatientCheckup")
                        .WithMany("Attachments")
                        .HasForeignKey("PatientChekupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FileAttachment");

                    b.Navigation("PatientCheckup");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CheckupPrescription", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.MedicalSpeciality", "MedicalSpeciality")
                        .WithMany()
                        .HasForeignKey("MedicalSpecialityId");

                    b.HasOne("PointOfSalesV2.Entities.PatientCheckup", "PatientCheckup")
                        .WithMany("CheckupPrescriptions")
                        .HasForeignKey("PatientCheckupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("MedicalSpeciality");

                    b.Navigation("PatientCheckup");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CompanyPayments", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CompositeProduct", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Product", "BaseProduct")
                        .WithMany()
                        .HasForeignKey("BaseProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.UnitProductEquivalence", "UnitProductEquivalence")
                        .WithMany("CompositeProducts")
                        .HasForeignKey("BaseProductUnitId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany("BaseCompositeProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseProduct");

                    b.Navigation("Currency");

                    b.Navigation("Product");

                    b.Navigation("UnitProductEquivalence");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CreditNote", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Customer", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Insurance", "Insurance")
                        .WithMany("Affiliates")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PointOfSalesV2.Entities.InsurancePlan", "InsurancePlan")
                        .WithMany("SubscribedPatients")
                        .HasForeignKey("InsurancePlanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PointOfSalesV2.Entities.TRNControl", "TRNControl")
                        .WithMany()
                        .HasForeignKey("TRNControlId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId");

                    b.Navigation("Currency");

                    b.Navigation("Insurance");

                    b.Navigation("InsurancePlan");

                    b.Navigation("TRNControl");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CustomerBalance", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Customer", "Customer")
                        .WithMany("CustomerBalances")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CustomerPayment", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Currency", "InvoiceCurrency")
                        .WithMany()
                        .HasForeignKey("InvoiceCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PointOfSalesV2.Entities.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId");

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("Invoice");

                    b.Navigation("InvoiceCurrency");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CustomerReturn", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.BranchOffice", "BranchOffice")
                        .WithMany()
                        .HasForeignKey("BranchOfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.CreditNote", "CreditNote")
                        .WithMany()
                        .HasForeignKey("CreditNoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BranchOffice");

                    b.Navigation("CreditNote");

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CustomerReturnDetail", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.CustomerReturn", null)
                        .WithMany("ReturnDetails")
                        .HasForeignKey("CustomerReturnId");

                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Expense", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.BranchOffice", "BranchOffice")
                        .WithMany()
                        .HasForeignKey("BranchOfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.PaymentType", "PaymentType")
                        .WithMany("Expenses")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PointOfSalesV2.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BranchOffice");

                    b.Navigation("Currency");

                    b.Navigation("PaymentType");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.ExpensesPayment", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Currency", "ExpenseCurrency")
                        .WithMany()
                        .HasForeignKey("ExpenseCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Expense", "Expense")
                        .WithMany("Payments")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.CompanyPayments", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.PaymentType", "PaymentType")
                        .WithMany("ExpensesPayments")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Expense");

                    b.Navigation("ExpenseCurrency");

                    b.Navigation("Payment");

                    b.Navigation("PaymentType");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.ExpenseTax", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Expense", "Expense")
                        .WithMany("Taxes")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Expense");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.InsurancePlan", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Insurance", "Insurance")
                        .WithMany("InsurancePlans")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.InsuranceServiceCoverage", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Insurance", "Insurance")
                        .WithMany("Coverages")
                        .HasForeignKey("InsuranceId");

                    b.HasOne("PointOfSalesV2.Entities.InsurancePlan", "InsurancePlan")
                        .WithMany()
                        .HasForeignKey("InsurancePlanId");

                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Insurance");

                    b.Navigation("InsurancePlan");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Inventory", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.BranchOffice", "BranchOffice")
                        .WithMany()
                        .HasForeignKey("BranchOfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Warehouse", "Warehouse")
                        .WithMany("Inventory")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BranchOffice");

                    b.Navigation("Product");

                    b.Navigation("Unit");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.InventoryEntry", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.BranchOffice", "BranchOffice")
                        .WithMany()
                        .HasForeignKey("BranchOfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BranchOffice");

                    b.Navigation("Currency");

                    b.Navigation("Product");

                    b.Navigation("Supplier");

                    b.Navigation("Unit");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Invoice", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.HasOne("PointOfSalesV2.Entities.BranchOffice", "BranchOffice")
                        .WithMany()
                        .HasForeignKey("BranchOfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Customer", "Patient")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Insurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId");

                    b.HasOne("PointOfSalesV2.Entities.InsurancePlan", "InsurancePlan")
                        .WithMany()
                        .HasForeignKey("InsurancePlanId");

                    b.HasOne("PointOfSalesV2.Entities.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId");

                    b.HasOne("PointOfSalesV2.Entities.TRNControl", "TRNControl")
                        .WithMany()
                        .HasForeignKey("TRNControlId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("BranchOffice");

                    b.Navigation("Currency");

                    b.Navigation("Insurance");

                    b.Navigation("InsurancePlan");

                    b.Navigation("Patient");

                    b.Navigation("Seller");

                    b.Navigation("TRNControl");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.InvoiceDetail", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.User", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("PointOfSalesV2.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.MedicalSpeciality", "MedicalSpeciality")
                        .WithMany()
                        .HasForeignKey("MedicalSpecialityId");

                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("Doctor");

                    b.Navigation("Invoice");

                    b.Navigation("MedicalSpeciality");

                    b.Navigation("Product");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.InvoiceLead", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.BranchOffice", "BranchOffice")
                        .WithMany()
                        .HasForeignKey("BranchOfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");

                    b.HasOne("PointOfSalesV2.Entities.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId");

                    b.HasOne("PointOfSalesV2.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId");

                    b.HasOne("PointOfSalesV2.Entities.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BranchOffice");

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("Invoice");

                    b.Navigation("Menu");

                    b.Navigation("School");

                    b.Navigation("Seller");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.InvoiceTax", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Invoice", "Invoice")
                        .WithMany("Taxes")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Invoice");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.LanguageKey", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.LeadDetail", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.InvoiceLead", "Lead")
                        .WithMany("LeadDetails")
                        .HasForeignKey("InvoiceLeadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("Lead");

                    b.Navigation("Product");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.MenuDetail", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Menu", "Menu")
                        .WithMany("MenuDetails")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("Menu");

                    b.Navigation("Product");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.PatientCheckup", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.HasOne("PointOfSalesV2.Entities.User", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Insurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId");

                    b.HasOne("PointOfSalesV2.Entities.InsurancePlan", "InsurancePlan")
                        .WithMany()
                        .HasForeignKey("InsurancePlanId");

                    b.HasOne("PointOfSalesV2.Entities.Customer", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("Insurance");

                    b.Navigation("InsurancePlan");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Payment", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Currency", "InvoiceCurrency")
                        .WithMany()
                        .HasForeignKey("InvoiceCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.PaymentType", "PaymentType")
                        .WithMany("InvoicesPayments")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId");

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("InvoiceCurrency");

                    b.Navigation("PaymentType");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.PaymentDetail", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Product", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.MedicalSpeciality", "MedicalSpeciality")
                        .WithMany()
                        .HasForeignKey("MedicalSpecialityId");

                    b.Navigation("Currency");

                    b.Navigation("MedicalSpeciality");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.ProductSupplierCost", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany("SuppliersCosts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Supplier", "Supplier")
                        .WithMany("ProductsCosts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.ProductTax", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany("Taxes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.RoleSectionOperation", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Role", "Role")
                        .WithMany("SectionOperations")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.School", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("AssignedWarehouseId");

                    b.HasOne("PointOfSalesV2.Entities.BranchOffice", "BranchOffice")
                        .WithMany()
                        .HasForeignKey("BranchOfficeId");

                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId");

                    b.Navigation("BranchOffice");

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("Warehouse");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.SchoolContact", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.School", "School")
                        .WithMany("Contacts")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.SectionOperation", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Operation", "Operation")
                        .WithMany("Sections")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Section", "Section")
                        .WithMany("Operations")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Operation");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Seller", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.SupplierBalance", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.SupplierReturn", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.BranchOffice", "BranchOffice")
                        .WithMany()
                        .HasForeignKey("BranchOfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BranchOffice");

                    b.Navigation("Currency");

                    b.Navigation("Product");

                    b.Navigation("Supplier");

                    b.Navigation("Unit");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.UnitProductEquivalence", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany("ProductUnits")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.User", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.BranchOffice", "BranchOffice")
                        .WithMany("Users")
                        .HasForeignKey("BranchOfficeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PointOfSalesV2.Entities.CashRegister", "CashRegister")
                        .WithMany()
                        .HasForeignKey("CashRegisterId");

                    b.HasOne("PointOfSalesV2.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageCode");

                    b.HasOne("PointOfSalesV2.Entities.MedicalSpeciality", "MedicalSpeciality")
                        .WithMany("Doctors")
                        .HasForeignKey("MedicalSpecialityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PointOfSalesV2.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");

                    b.Navigation("BranchOffice");

                    b.Navigation("CashRegister");

                    b.Navigation("Language");

                    b.Navigation("MedicalSpeciality");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.UserClaims", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.User", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.UserOperation", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.User", null)
                        .WithMany("Permissions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.UserRole", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Warehouse", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.BranchOffice", "BranchOffice")
                        .WithMany("Warehouses")
                        .HasForeignKey("BranchOfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BranchOffice");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.WarehouseMovement", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.BranchOffice", "BranchOffice")
                        .WithMany()
                        .HasForeignKey("BranchOfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BranchOffice");

                    b.Navigation("Product");

                    b.Navigation("Unit");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.WarehouseTransfer", b =>
                {
                    b.HasOne("PointOfSalesV2.Entities.BranchOffice", "DestinyBranchOffice")
                        .WithMany()
                        .HasForeignKey("DestinyBranchOfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Warehouse", "Destiny")
                        .WithMany()
                        .HasForeignKey("DestinyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.BranchOffice", "OriginBranchOffice")
                        .WithMany()
                        .HasForeignKey("OriginBranchOfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Warehouse", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PointOfSalesV2.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Destiny");

                    b.Navigation("DestinyBranchOffice");

                    b.Navigation("Origin");

                    b.Navigation("OriginBranchOffice");

                    b.Navigation("Product");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Appointment", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.BranchOffice", b =>
                {
                    b.Navigation("CashRegisters");

                    b.Navigation("Users");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CashRegisterOpening", b =>
                {
                    b.Navigation("CashFlow");

                    b.Navigation("Details");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Customer", b =>
                {
                    b.Navigation("CustomerBalances");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.CustomerReturn", b =>
                {
                    b.Navigation("ReturnDetails");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Expense", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Taxes");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Insurance", b =>
                {
                    b.Navigation("Affiliates");

                    b.Navigation("Coverages");

                    b.Navigation("InsurancePlans");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.InsurancePlan", b =>
                {
                    b.Navigation("SubscribedPatients");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");

                    b.Navigation("Payments");

                    b.Navigation("Taxes");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.InvoiceLead", b =>
                {
                    b.Navigation("LeadDetails");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.MedicalSpeciality", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Menu", b =>
                {
                    b.Navigation("MenuDetails");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Operation", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.PatientCheckup", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("CheckupPrescriptions");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.PaymentType", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("ExpensesPayments");

                    b.Navigation("InvoicesPayments");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Product", b =>
                {
                    b.Navigation("BaseCompositeProducts");

                    b.Navigation("ProductUnits");

                    b.Navigation("SuppliersCosts");

                    b.Navigation("Taxes");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Role", b =>
                {
                    b.Navigation("SectionOperations");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.School", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Section", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Supplier", b =>
                {
                    b.Navigation("ProductsCosts");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.UnitProductEquivalence", b =>
                {
                    b.Navigation("CompositeProducts");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.User", b =>
                {
                    b.Navigation("CashRegisterOpeningClosings");

                    b.Navigation("Claims");

                    b.Navigation("Permissions");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("PointOfSalesV2.Entities.Warehouse", b =>
                {
                    b.Navigation("Inventory");
                });
#pragma warning restore 612, 618
        }
    }
}
